{
  "labelModuleMap": {
    "plugin": {
      "java": "apply plugin: 'java'\n",
      "kotlin": "apply plugin: 'kotlin'\n"
    },
    "pluginSettings": {
    },
    "buildscriptClasspath": {
      "init": "    dependencies {\n#{buildscriptClasspath}\n    }",
      "kotlin": "        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\""
    },
    "dependency": {
      "init": "dependencies {\n#{dependency}\n    testCompile \"org.junit.jupiter:junit-jupiter-api:$jupiterVersion\"\n    testRuntime \"org.junit.jupiter:junit-jupiter-engine:$jupiterVersion\"\n}\n",
      "kotlin": "    compile \"com.idf.soul:base-spring5:${soulVersion}\"",
      "java": "    compile \"com.idf.soul:base-spring5:${soulVersion}\"",
      "rabbit": "    compile \"com.idf.soul:mm-event-bus:$soulVersion\"",
      "mongo": "    compile \"com.idf.soul:config-mongo:$soulVersion\"",
      "retrofit": "    compile \"com.idf.soul:config-retrofit:$soulVersion\"",
      "feign": "    compile \"com.idf.soul:mm-feign:$soulVersion\""
    },
    "sourceSets": {
      "init": "sourceSets {\n    #{sourceSets}\n}",
      "jooq": "main.kotlin.srcDirs += 'build/generated-src/jooq/db'"
    },
    "ext": {
      "jooq": "ext {\n    mmJooqApp = '#{countryUppercase}'\n}\n\napply from: \"${rootDir}/_gradle/jooq.gradle\"\n\njooq {\n    db(sourceSets.main) {\n        generator {\n            database {\n                includes = 'credit|borrower' // TODO ADD UR TABLES\n                /* TODO CUSTOMIZE UR CONVERTERS\n                customTypes {\n                    customType {\n                        name = 'LocalDateTimeConverter'\n                        converter = 'com.mm.db.jooq.converter.LocalDateTimeConverter'\n                        type = java.time.LocalDateTime.class.name\n                    }\n                    customType {\n                        name = 'LocalDateConverter'\n                        converter = 'com.mm.db.jooq.converter.LocalDateConverter'\n                        type = java.time.LocalDate.class.name\n                    }\n                    customType {\n                        name = 'BooleanConverter'\n                        type = 'java.lang.Boolean'\n                        converter = 'com.mm.db.jooq.converter.BooleanConverter'\n                    }\n                    customType {\n                        name = 'ChipherConverter'\n                        type = 'java.lang.String'\n                        converter = 'com.mm.db.jooq.converter.CryptStringConverter'\n                    }\n                    forcedTypes {\n                        forcedType() {\n                            name = 'LocalDateTimeConverter'\n                            expression = '.*'\n                            types = 'datetime|timestamp'\n                        }\n                        forcedType() {\n                            name = 'LocalDateConverter'\n                            expression = '.*'\n                            types = 'date'\n                        }\n                        forcedType {\n                            name = 'ChipherConverter'\n                            expression = '.*\\\\.user_account\\\\.phone'\n                            types = '.*'\n                        }\n                        forcedType {\n                            name = 'ChipherConverter'\n                            expression = '.*\\\\.collector_action_contact\\\\.value'\n                            types = '.*'\n                        }\n                        forcedType() {\n                            name = 'BooleanConverter'\n                            expression = '.*'\n                            types = 'TINYINT'\n                        }\n                    }\n                }\n                */\n                generate {\n                    pojos = true\n                    daos = true\n                    generatedAnnotation = false\n                    fluentSetters = true\n                }\n\n                target {\n                    packageName = '#{package}.db.generated'\n                }\n            }\n        }\n    }\n}\n"
    }
  }
}